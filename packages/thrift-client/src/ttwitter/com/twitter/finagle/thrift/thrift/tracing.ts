/* tslint:disable */
/*
 * Autogenerated by @creditkarma/thrift-typescript v1.1.8
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
*/
import * as thrift from "@creditkarma/thrift-server-core";
export enum AnnotationType {
    BOOL,
    BYTES,
    I16,
    I32,
    I64,
    DOUBLE,
    STRING
}
export const CLIENT_SEND: string = "cs";
export const CLIENT_RECV: string = "cr";
export const CLIENT_RECV_ERROR: string = "Client Receive Error";
export const SERVER_SEND: string = "ss";
export const SERVER_SEND_ERROR: string = "Server Send Error";
export const SERVER_RECV: string = "sr";
export const WIRE_SEND: string = "ws";
export const WIRE_RECV: string = "wr";
export const WIRE_RECV_ERROR: string = "Wire Receive Error";
export const CLIENT_SEND_FRAGMENT: string = "csf";
export const CLIENT_RECV_FRAGMENT: string = "crf";
export const SERVER_SEND_FRAGMENT: string = "ssf";
export const SERVER_RECV_FRAGMENT: string = "srf";
export const CLIENT_ADDR: string = "ca";
export const SERVER_ADDR: string = "sa";
export interface IEndpointArgs {
    ipv4?: number;
    port?: number;
    service_name?: string;
}
export class Endpoint implements thrift.StructLike {
    public ipv4?: number;
    public port?: number;
    public service_name?: string;
    constructor(args?: IEndpointArgs) {
        if (args != null && args.ipv4 != null) {
            this.ipv4 = args.ipv4;
        }
        if (args != null && args.port != null) {
            this.port = args.port;
        }
        if (args != null && args.service_name != null) {
            this.service_name = args.service_name;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Endpoint");
        if (this.ipv4 != null) {
            output.writeFieldBegin("ipv4", thrift.TType.I32, 1);
            output.writeI32(this.ipv4);
            output.writeFieldEnd();
        }
        if (this.port != null) {
            output.writeFieldBegin("port", thrift.TType.I16, 2);
            output.writeI16(this.port);
            output.writeFieldEnd();
        }
        if (this.service_name != null) {
            output.writeFieldBegin("service_name", thrift.TType.STRING, 3);
            output.writeString(this.service_name);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Endpoint {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I32) {
                        const value_1: number = input.readI32();
                        _args.ipv4 = value_1;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I16) {
                        const value_2: number = input.readI16();
                        _args.port = value_2;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_3: string = input.readString();
                        _args.service_name = value_3;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Endpoint(_args);
    }
}
export interface IAnnotationArgs {
    timestamp?: number | thrift.Int64;
    value?: string;
    host?: Endpoint;
}
export class Annotation implements thrift.StructLike {
    public timestamp?: thrift.Int64;
    public value?: string;
    public host?: Endpoint;
    constructor(args?: IAnnotationArgs) {
        if (args != null && args.timestamp != null) {
            if (typeof args.timestamp === "number") {
                this.timestamp = new thrift.Int64(args.timestamp);
            }
            else {
                this.timestamp = args.timestamp;
            }
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.host != null) {
            this.host = args.host;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Annotation");
        if (this.timestamp != null) {
            output.writeFieldBegin("timestamp", thrift.TType.I64, 1);
            output.writeI64(this.timestamp);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.TType.STRING, 2);
            output.writeString(this.value);
            output.writeFieldEnd();
        }
        if (this.host != null) {
            output.writeFieldBegin("host", thrift.TType.STRUCT, 3);
            this.host.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Annotation {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_4: thrift.Int64 = input.readI64();
                        _args.timestamp = value_4;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_5: string = input.readString();
                        _args.value = value_5;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_6: Endpoint = Endpoint.read(input);
                        _args.host = value_6;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Annotation(_args);
    }
}
export interface IBinaryAnnotationArgs {
    key?: string;
    value?: Buffer;
    annotation_type?: AnnotationType;
    host?: Endpoint;
}
export class BinaryAnnotation implements thrift.StructLike {
    public key?: string;
    public value?: Buffer;
    public annotation_type?: AnnotationType;
    public host?: Endpoint;
    constructor(args?: IBinaryAnnotationArgs) {
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
        if (args != null && args.annotation_type != null) {
            this.annotation_type = args.annotation_type;
        }
        if (args != null && args.host != null) {
            this.host = args.host;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("BinaryAnnotation");
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.TType.STRING, 1);
            output.writeString(this.key);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.TType.STRING, 2);
            output.writeBinary(this.value);
            output.writeFieldEnd();
        }
        if (this.annotation_type != null) {
            output.writeFieldBegin("annotation_type", thrift.TType.I32, 3);
            output.writeI32(this.annotation_type);
            output.writeFieldEnd();
        }
        if (this.host != null) {
            output.writeFieldBegin("host", thrift.TType.STRUCT, 4);
            this.host.write(output);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): BinaryAnnotation {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_7: string = input.readString();
                        _args.key = value_7;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_8: Buffer = input.readBinary();
                        _args.value = value_8;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I32) {
                        const value_9: AnnotationType = input.readI32();
                        _args.annotation_type = value_9;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_10: Endpoint = Endpoint.read(input);
                        _args.host = value_10;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new BinaryAnnotation(_args);
    }
}
export interface ISpanArgs {
    trace_id?: number | thrift.Int64;
    name?: string;
    id?: number | thrift.Int64;
    parent_id?: number | thrift.Int64;
    annotations?: Array<Annotation>;
    binary_annotations?: Array<BinaryAnnotation>;
    debug?: boolean;
}
export class Span implements thrift.StructLike {
    public trace_id?: thrift.Int64;
    public name?: string;
    public id?: thrift.Int64;
    public parent_id?: thrift.Int64;
    public annotations?: Array<Annotation>;
    public binary_annotations?: Array<BinaryAnnotation>;
    public debug?: boolean;
    constructor(args?: ISpanArgs) {
        if (args != null && args.trace_id != null) {
            if (typeof args.trace_id === "number") {
                this.trace_id = new thrift.Int64(args.trace_id);
            }
            else {
                this.trace_id = args.trace_id;
            }
        }
        if (args != null && args.name != null) {
            this.name = args.name;
        }
        if (args != null && args.id != null) {
            if (typeof args.id === "number") {
                this.id = new thrift.Int64(args.id);
            }
            else {
                this.id = args.id;
            }
        }
        if (args != null && args.parent_id != null) {
            if (typeof args.parent_id === "number") {
                this.parent_id = new thrift.Int64(args.parent_id);
            }
            else {
                this.parent_id = args.parent_id;
            }
        }
        if (args != null && args.annotations != null) {
            this.annotations = args.annotations;
        }
        if (args != null && args.binary_annotations != null) {
            this.binary_annotations = args.binary_annotations;
        }
        if (args != null && args.debug != null) {
            this.debug = args.debug;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Span");
        if (this.trace_id != null) {
            output.writeFieldBegin("trace_id", thrift.TType.I64, 1);
            output.writeI64(this.trace_id);
            output.writeFieldEnd();
        }
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 3);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        if (this.id != null) {
            output.writeFieldBegin("id", thrift.TType.I64, 4);
            output.writeI64(this.id);
            output.writeFieldEnd();
        }
        if (this.parent_id != null) {
            output.writeFieldBegin("parent_id", thrift.TType.I64, 5);
            output.writeI64(this.parent_id);
            output.writeFieldEnd();
        }
        if (this.annotations != null) {
            output.writeFieldBegin("annotations", thrift.TType.LIST, 6);
            output.writeListBegin(thrift.TType.STRUCT, this.annotations.length);
            this.annotations.forEach((value_11: Annotation): void => {
                value_11.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.binary_annotations != null) {
            output.writeFieldBegin("binary_annotations", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.STRUCT, this.binary_annotations.length);
            this.binary_annotations.forEach((value_12: BinaryAnnotation): void => {
                value_12.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.debug != null) {
            output.writeFieldBegin("debug", thrift.TType.BOOL, 9);
            output.writeBool(this.debug);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Span {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_13: thrift.Int64 = input.readI64();
                        _args.trace_id = value_13;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.STRING) {
                        const value_14: string = input.readString();
                        _args.name = value_14;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 4:
                    if (fieldType === thrift.TType.I64) {
                        const value_15: thrift.Int64 = input.readI64();
                        _args.id = value_15;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.I64) {
                        const value_16: thrift.Int64 = input.readI64();
                        _args.parent_id = value_16;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.LIST) {
                        const value_17: Array<Annotation> = new Array<Annotation>();
                        const metadata_1: thrift.IThriftList = input.readListBegin();
                        const size_1: number = metadata_1.size;
                        for (let i_1: number = 0; i_1 < size_1; i_1++) {
                            const value_18: Annotation = Annotation.read(input);
                            value_17.push(value_18);
                        }
                        input.readListEnd();
                        _args.annotations = value_17;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_19: Array<BinaryAnnotation> = new Array<BinaryAnnotation>();
                        const metadata_2: thrift.IThriftList = input.readListBegin();
                        const size_2: number = metadata_2.size;
                        for (let i_2: number = 0; i_2 < size_2; i_2++) {
                            const value_20: BinaryAnnotation = BinaryAnnotation.read(input);
                            value_19.push(value_20);
                        }
                        input.readListEnd();
                        _args.binary_annotations = value_19;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_21: boolean = input.readBool();
                        _args.debug = value_21;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Span(_args);
    }
}
export interface IClientIdArgs {
    name?: string;
}
export class ClientId implements thrift.StructLike {
    public name?: string;
    constructor(args?: IClientIdArgs) {
        if (args != null && args.name != null) {
            this.name = args.name;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ClientId");
        if (this.name != null) {
            output.writeFieldBegin("name", thrift.TType.STRING, 1);
            output.writeString(this.name);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ClientId {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_22: string = input.readString();
                        _args.name = value_22;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ClientId(_args);
    }
}
export interface IRequestContextArgs {
    key?: Buffer;
    value?: Buffer;
}
export class RequestContext implements thrift.StructLike {
    public key?: Buffer;
    public value?: Buffer;
    constructor(args?: IRequestContextArgs) {
        if (args != null && args.key != null) {
            this.key = args.key;
        }
        if (args != null && args.value != null) {
            this.value = args.value;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RequestContext");
        if (this.key != null) {
            output.writeFieldBegin("key", thrift.TType.STRING, 1);
            output.writeBinary(this.key);
            output.writeFieldEnd();
        }
        if (this.value != null) {
            output.writeFieldBegin("value", thrift.TType.STRING, 2);
            output.writeBinary(this.value);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RequestContext {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_23: Buffer = input.readBinary();
                        _args.key = value_23;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_24: Buffer = input.readBinary();
                        _args.value = value_24;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RequestContext(_args);
    }
}
export interface IDelegationArgs {
    src?: string;
    dst?: string;
}
export class Delegation implements thrift.StructLike {
    public src?: string;
    public dst?: string;
    constructor(args?: IDelegationArgs) {
        if (args != null && args.src != null) {
            this.src = args.src;
        }
        if (args != null && args.dst != null) {
            this.dst = args.dst;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("Delegation");
        if (this.src != null) {
            output.writeFieldBegin("src", thrift.TType.STRING, 1);
            output.writeString(this.src);
            output.writeFieldEnd();
        }
        if (this.dst != null) {
            output.writeFieldBegin("dst", thrift.TType.STRING, 2);
            output.writeString(this.dst);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): Delegation {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.STRING) {
                        const value_25: string = input.readString();
                        _args.src = value_25;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.STRING) {
                        const value_26: string = input.readString();
                        _args.dst = value_26;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new Delegation(_args);
    }
}
export interface IRequestHeaderArgs {
    trace_id?: number | thrift.Int64;
    span_id?: number | thrift.Int64;
    parent_span_id?: number | thrift.Int64;
    sampled?: boolean;
    client_id?: ClientId;
    flags?: number | thrift.Int64;
    contexts?: Array<RequestContext>;
    dest?: string;
    delegations?: Array<Delegation>;
    trace_id_high?: number | thrift.Int64;
}
export class RequestHeader implements thrift.StructLike {
    public trace_id?: thrift.Int64;
    public span_id?: thrift.Int64;
    public parent_span_id?: thrift.Int64;
    public sampled?: boolean;
    public client_id?: ClientId;
    public flags?: thrift.Int64;
    public contexts?: Array<RequestContext>;
    public dest?: string;
    public delegations?: Array<Delegation>;
    public trace_id_high?: thrift.Int64;
    constructor(args?: IRequestHeaderArgs) {
        if (args != null && args.trace_id != null) {
            if (typeof args.trace_id === "number") {
                this.trace_id = new thrift.Int64(args.trace_id);
            }
            else {
                this.trace_id = args.trace_id;
            }
        }
        if (args != null && args.span_id != null) {
            if (typeof args.span_id === "number") {
                this.span_id = new thrift.Int64(args.span_id);
            }
            else {
                this.span_id = args.span_id;
            }
        }
        if (args != null && args.parent_span_id != null) {
            if (typeof args.parent_span_id === "number") {
                this.parent_span_id = new thrift.Int64(args.parent_span_id);
            }
            else {
                this.parent_span_id = args.parent_span_id;
            }
        }
        if (args != null && args.sampled != null) {
            this.sampled = args.sampled;
        }
        if (args != null && args.client_id != null) {
            this.client_id = args.client_id;
        }
        if (args != null && args.flags != null) {
            if (typeof args.flags === "number") {
                this.flags = new thrift.Int64(args.flags);
            }
            else {
                this.flags = args.flags;
            }
        }
        if (args != null && args.contexts != null) {
            this.contexts = args.contexts;
        }
        if (args != null && args.dest != null) {
            this.dest = args.dest;
        }
        if (args != null && args.delegations != null) {
            this.delegations = args.delegations;
        }
        if (args != null && args.trace_id_high != null) {
            if (typeof args.trace_id_high === "number") {
                this.trace_id_high = new thrift.Int64(args.trace_id_high);
            }
            else {
                this.trace_id_high = args.trace_id_high;
            }
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("RequestHeader");
        if (this.trace_id != null) {
            output.writeFieldBegin("trace_id", thrift.TType.I64, 1);
            output.writeI64(this.trace_id);
            output.writeFieldEnd();
        }
        if (this.span_id != null) {
            output.writeFieldBegin("span_id", thrift.TType.I64, 2);
            output.writeI64(this.span_id);
            output.writeFieldEnd();
        }
        if (this.parent_span_id != null) {
            output.writeFieldBegin("parent_span_id", thrift.TType.I64, 3);
            output.writeI64(this.parent_span_id);
            output.writeFieldEnd();
        }
        if (this.sampled != null) {
            output.writeFieldBegin("sampled", thrift.TType.BOOL, 5);
            output.writeBool(this.sampled);
            output.writeFieldEnd();
        }
        if (this.client_id != null) {
            output.writeFieldBegin("client_id", thrift.TType.STRUCT, 6);
            this.client_id.write(output);
            output.writeFieldEnd();
        }
        if (this.flags != null) {
            output.writeFieldBegin("flags", thrift.TType.I64, 7);
            output.writeI64(this.flags);
            output.writeFieldEnd();
        }
        if (this.contexts != null) {
            output.writeFieldBegin("contexts", thrift.TType.LIST, 8);
            output.writeListBegin(thrift.TType.STRUCT, this.contexts.length);
            this.contexts.forEach((value_27: RequestContext): void => {
                value_27.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.dest != null) {
            output.writeFieldBegin("dest", thrift.TType.STRING, 9);
            output.writeString(this.dest);
            output.writeFieldEnd();
        }
        if (this.delegations != null) {
            output.writeFieldBegin("delegations", thrift.TType.LIST, 10);
            output.writeListBegin(thrift.TType.STRUCT, this.delegations.length);
            this.delegations.forEach((value_28: Delegation): void => {
                value_28.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.trace_id_high != null) {
            output.writeFieldBegin("trace_id_high", thrift.TType.I64, 11);
            output.writeI64(this.trace_id_high);
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): RequestHeader {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.I64) {
                        const value_29: thrift.Int64 = input.readI64();
                        _args.trace_id = value_29;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.I64) {
                        const value_30: thrift.Int64 = input.readI64();
                        _args.span_id = value_30;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 3:
                    if (fieldType === thrift.TType.I64) {
                        const value_31: thrift.Int64 = input.readI64();
                        _args.parent_span_id = value_31;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 5:
                    if (fieldType === thrift.TType.BOOL) {
                        const value_32: boolean = input.readBool();
                        _args.sampled = value_32;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 6:
                    if (fieldType === thrift.TType.STRUCT) {
                        const value_33: ClientId = ClientId.read(input);
                        _args.client_id = value_33;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 7:
                    if (fieldType === thrift.TType.I64) {
                        const value_34: thrift.Int64 = input.readI64();
                        _args.flags = value_34;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 8:
                    if (fieldType === thrift.TType.LIST) {
                        const value_35: Array<RequestContext> = new Array<RequestContext>();
                        const metadata_3: thrift.IThriftList = input.readListBegin();
                        const size_3: number = metadata_3.size;
                        for (let i_3: number = 0; i_3 < size_3; i_3++) {
                            const value_36: RequestContext = RequestContext.read(input);
                            value_35.push(value_36);
                        }
                        input.readListEnd();
                        _args.contexts = value_35;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 9:
                    if (fieldType === thrift.TType.STRING) {
                        const value_37: string = input.readString();
                        _args.dest = value_37;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 10:
                    if (fieldType === thrift.TType.LIST) {
                        const value_38: Array<Delegation> = new Array<Delegation>();
                        const metadata_4: thrift.IThriftList = input.readListBegin();
                        const size_4: number = metadata_4.size;
                        for (let i_4: number = 0; i_4 < size_4; i_4++) {
                            const value_39: Delegation = Delegation.read(input);
                            value_38.push(value_39);
                        }
                        input.readListEnd();
                        _args.delegations = value_38;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 11:
                    if (fieldType === thrift.TType.I64) {
                        const value_40: thrift.Int64 = input.readI64();
                        _args.trace_id_high = value_40;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new RequestHeader(_args);
    }
}
export interface IResponseHeaderArgs {
    spans?: Array<Span>;
    contexts?: Array<RequestContext>;
}
export class ResponseHeader implements thrift.StructLike {
    public spans?: Array<Span>;
    public contexts?: Array<RequestContext>;
    constructor(args?: IResponseHeaderArgs) {
        if (args != null && args.spans != null) {
            this.spans = args.spans;
        }
        if (args != null && args.contexts != null) {
            this.contexts = args.contexts;
        }
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ResponseHeader");
        if (this.spans != null) {
            output.writeFieldBegin("spans", thrift.TType.LIST, 1);
            output.writeListBegin(thrift.TType.STRUCT, this.spans.length);
            this.spans.forEach((value_41: Span): void => {
                value_41.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        if (this.contexts != null) {
            output.writeFieldBegin("contexts", thrift.TType.LIST, 2);
            output.writeListBegin(thrift.TType.STRUCT, this.contexts.length);
            this.contexts.forEach((value_42: RequestContext): void => {
                value_42.write(output);
            });
            output.writeListEnd();
            output.writeFieldEnd();
        }
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ResponseHeader {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                case 1:
                    if (fieldType === thrift.TType.LIST) {
                        const value_43: Array<Span> = new Array<Span>();
                        const metadata_5: thrift.IThriftList = input.readListBegin();
                        const size_5: number = metadata_5.size;
                        for (let i_5: number = 0; i_5 < size_5; i_5++) {
                            const value_44: Span = Span.read(input);
                            value_43.push(value_44);
                        }
                        input.readListEnd();
                        _args.spans = value_43;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                case 2:
                    if (fieldType === thrift.TType.LIST) {
                        const value_45: Array<RequestContext> = new Array<RequestContext>();
                        const metadata_6: thrift.IThriftList = input.readListBegin();
                        const size_6: number = metadata_6.size;
                        for (let i_6: number = 0; i_6 < size_6; i_6++) {
                            const value_46: RequestContext = RequestContext.read(input);
                            value_45.push(value_46);
                        }
                        input.readListEnd();
                        _args.contexts = value_45;
                    }
                    else {
                        input.skip(fieldType);
                    }
                    break;
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ResponseHeader(_args);
    }
}
export interface IConnectionOptionsArgs {
}
export class ConnectionOptions implements thrift.StructLike {
    constructor(args?: IConnectionOptionsArgs) {
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("ConnectionOptions");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): ConnectionOptions {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new ConnectionOptions(_args);
    }
}
export interface IUpgradeReplyArgs {
}
export class UpgradeReply implements thrift.StructLike {
    constructor(args?: IUpgradeReplyArgs) {
    }
    public write(output: thrift.TProtocol): void {
        output.writeStructBegin("UpgradeReply");
        output.writeFieldStop();
        output.writeStructEnd();
        return;
    }
    public static read(input: thrift.TProtocol): UpgradeReply {
        input.readStructBegin();
        let _args: any = {};
        while (true) {
            const ret: thrift.IThriftField = input.readFieldBegin();
            const fieldType: thrift.TType = ret.fieldType;
            const fieldId: number = ret.fieldId;
            if (fieldType === thrift.TType.STOP) {
                break;
            }
            switch (fieldId) {
                default: {
                    input.skip(fieldType);
                }
            }
            input.readFieldEnd();
        }
        input.readStructEnd();
        return new UpgradeReply(_args);
    }
}
